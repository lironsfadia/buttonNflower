create table if not exists public.reports (
id int generated by default as identity primary key,
name text not null,
location_point gis.geography(POINT) not null
);

ALTER TABLE public.reports
ADD COLUMN location_point gis.geography(POINT);

create index reports_geo_index
on public.reports
using GIST (location_point);

// npx supabase gen types typescript --project-id "$PROJECT_REF" --schema public > types/supabase.ts
DROP EXTENSION postgis CASCADE;
DROP FUNCTION nearby_reports(double precision,double precision);

create or replace function nearby_reports(lat float, long float)
returns table (
id public.reports.id%TYPE,
name public.reports.name%TYPE,
created_at public.reports.created_at%TYPE,
content public.reports.content%TYPE,
items_count public.reports.items_count%TYPE,
like_count public.reports.like_count%TYPE,
pics public.reports.pics%TYPE,
plant_ids public.reports.plant_ids%TYPE,
seen_at public.reports.seen_at%TYPE,
status public.reports.status%TYPE,
user_id public.reports.user_id%TYPE,
view_count public.reports.view_count%TYPE,
location public.reports.location%TYPE,
lat float,
long float,
dist_meters float
)

set search_path = ''
language sql
as $$
select id, name, created_at, content, items_count, like_count, pics, plant_ids, seen_at, status, user_id, view_count, location, gis.st_y(location_point::gis.geometry) as lat, gis.st_x(location_point::gis.geometry) as long, gis.st_distance(location_point, gis.st_point(long, lat)::gis.geography) as dist_meters
from public.reports
order by location_point operator(gis.<->) gis.st_point(long, lat)::gis.geography;

$$
;


$$
